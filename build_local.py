#!/usr/bin/env python3
"""
Script para construir binarios localmente usando PyInstaller
√ötil para probar antes de hacer push al repositorio
"""

import sys
import subprocess
import platform
from pathlib import Path

def install_pyinstaller():
    """Instalar PyInstaller si no est√° disponible"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller ya est√° instalado")
        return True
    except ImportError:
        print("üì¶ Instalando PyInstaller...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
            print("‚úÖ PyInstaller instalado correctamente")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando PyInstaller: {e}")
            return False

def build_executable():
    """Construir el ejecutable usando PyInstaller"""
    
    if not install_pyinstaller():
        return False
    
    # Detectar plataforma
    system = platform.system()
    arch = platform.machine()
    
    print(f"üî® Construyendo para {system} ({arch})...")
    
    # Comandos base de PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",
        "--name=HP150-Toolkit",
        "--add-data=src:src" if system != "Windows" else "--add-data=src;src",
        "--add-data=assets:assets" if system != "Windows" else "--add-data=assets;assets",
        "--hidden-import=tkinter",
        "--hidden-import=tkinter.ttk",
        "--hidden-import=tkinter.filedialog",
        "--hidden-import=tkinter.messagebox",
        "--hidden-import=tkinter.simpledialog",
        "--collect-all=tkinter",
        "run_gui.py"
    ]
    
    # Configuraciones espec√≠ficas por plataforma
    if system == "Darwin":  # macOS
        cmd.extend([
            "--windowed",
            f"--icon=assets/icon.icns"
        ])
        if arch == "arm64":
            print("üçé Construyendo para Apple Silicon...")
        else:
            print("üçé Construyendo para Intel Mac...")
            
    elif system == "Windows":
        cmd.extend([
            "--windowed",
            "--console",  # Mantener consola para debugging
            "--icon=assets/icon.ico"
        ])
        print("ü™ü Construyendo para Windows...")
        
    elif system == "Linux":
        cmd.extend([
            "--icon=assets/icon.png"
        ])
        print("üêß Construyendo para Linux...")
    
    # Ejecutar PyInstaller
    try:
        print(f"Ejecutando: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Construcci√≥n exitosa!")
            
            # Mostrar informaci√≥n del archivo generado
            if system == "Windows":
                exe_path = Path("dist/HP150-Toolkit.exe")
            else:
                exe_path = Path("dist/HP150-Toolkit")
            
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üìÅ Ejecutable creado: {exe_path}")
                print(f"üìä Tama√±o: {size_mb:.2f} MB")
                
                # Instrucciones de uso
                print("\nüöÄ C√≥mo ejecutar:")
                if system == "Windows":
                    print("   HP150-Toolkit.exe")
                    print("   HP150-Toolkit.exe --extended  (modo extendido)")
                else:
                    print("   ./HP150-Toolkit")
                    print("   ./HP150-Toolkit --extended  (modo extendido)")
                
                return True
            else:
                print("‚ùå No se encontr√≥ el ejecutable generado")
                return False
        else:
            print("‚ùå Error en la construcci√≥n:")
            print(result.stdout)
            print(result.stderr)
            return False
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando PyInstaller: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå PyInstaller no encontrado. Aseg√∫rate de que est√© instalado.")
        return False

def main():
    """Funci√≥n principal"""
    print("üèóÔ∏è  HP-150 Toolkit - Constructor Local")
    print("=" * 50)
    
    # Verificar que estamos en el directorio correcto
    if not Path("run_gui.py").exists():
        print("‚ùå Error: No se encontr√≥ run_gui.py")
        print("   Aseg√∫rate de ejecutar este script desde la ra√≠z del proyecto")
        return False
    
    # Verificar estructura de directorios
    if not Path("src").exists():
        print("‚ùå Error: No se encontr√≥ el directorio src/")
        return False
    
    if not Path("assets").exists():
        print("‚ö†Ô∏è  Advertencia: No se encontr√≥ el directorio assets/")
        print("   Ejecutando create_icons.py...")
        try:
            subprocess.check_call([sys.executable, "create_icons.py"])
        except:
            print("‚ùå Error creando iconos. Continuando sin iconos...")
    
    # Construir el ejecutable
    success = build_executable()
    
    if success:
        print("\n‚úÖ ¬°Construcci√≥n completada exitosamente!")
        print("\nüí° Para crear binarios para m√∫ltiples plataformas:")
        print("   1. Haz push de tu c√≥digo a GitHub")
        print("   2. Crea un tag: git tag v1.0.0 && git push origin v1.0.0")
        print("   3. Los binarios se generar√°n autom√°ticamente en GitHub Actions")
    else:
        print("\n‚ùå La construcci√≥n fall√≥")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
