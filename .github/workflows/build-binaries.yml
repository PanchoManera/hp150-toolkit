name: Build HP-150 Toolkit Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  PYINSTALLER_ARGS: '--paths=src --hidden-import=gui.hp150_gui --hidden-import=gui.hp150_gui_extended --hidden-import=gui.config_manager --hidden-import=gui.greasewazle_config_dialog --hidden-import=tools.hp150_fat'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            artifact-name: 'hp150-toolkit-macos'
            exe-name: 'HP150-Toolkit.app'
            icon: '🍎'
            platform: 'macOS'
            build-type: 'windowed'
            
          - os: windows-latest
            artifact-name: 'hp150-toolkit-windows'
            exe-name: 'HP150-Toolkit.exe'
            icon: '🪟'
            platform: 'Windows'
            build-type: 'onefile'
            
          - os: ubuntu-latest
            artifact-name: 'hp150-toolkit-linux'
            exe-name: 'HP150-Toolkit'
            icon: '🐧'
            platform: 'Linux'
            build-type: 'onefile'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y python3-tk
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Windows Python from actions/setup-python includes tkinter by default
          echo "Windows: tkinter should be available by default"
        fi
      shell: bash
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    
    - name: Debug import (Windows only)
      if: runner.os == 'Windows'
      run: |
        echo "Testing imports..."
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import tkinter; print('✅ tkinter available')"
        python -c "import sys; print('Python path:', sys.path[:3])"
        echo "Current directory structure:"
        dir /s /b src\gui
        python -c "import sys; sys.path.insert(0, 'src'); from gui.hp150_gui import HP150ImageManager; print('✅ HP150ImageManager import successful')"
        python -c "import sys; sys.path.insert(0, 'src'); from gui.hp150_gui_extended import HP150ImageManagerExtended; print('✅ HP150ImageManagerExtended import successful')"
        echo "✅ All imports successful"
    
    - name: Build executable
      run: |
        BUILD_CMD="pyinstaller --name=HP150-Toolkit ${{ env.PYINSTALLER_ARGS }}"
        
        # Add OS-specific flags
        if [ "${{ matrix.build-type }}" == "windowed" ]; then
          BUILD_CMD="$BUILD_CMD --windowed --add-data=src:src --noconsole"
        elif [ "${{ matrix.build-type }}" == "onefile" ]; then
          BUILD_CMD="$BUILD_CMD --onefile"
          if [ "$RUNNER_OS" == "Linux" ]; then
            BUILD_CMD="$BUILD_CMD --add-data=src:src"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            BUILD_CMD="$BUILD_CMD --console --add-data=src;src"
            # Windows-specific hidden imports for tkinter
            BUILD_CMD="$BUILD_CMD --hidden-import=tkinter --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --hidden-import=tkinter.ttk"
          fi
        fi
        
        BUILD_CMD="$BUILD_CMD run_gui.py"
        echo "🔨 Running: $BUILD_CMD"
        eval $BUILD_CMD
      shell: bash
    
    - name: Prepare distribution
      run: |
        mkdir -p dist-final
        
        # Copy executable
        if [ "$RUNNER_OS" == "macOS" ]; then
          cp -r "dist/${{ matrix.exe-name }}" dist-final/
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cp "dist/${{ matrix.exe-name }}" dist-final/
        else
          cp "dist/${{ matrix.exe-name }}" dist-final/
        fi
        
        # Create HOW_TO_RUN.txt
        echo "${{ matrix.icon }} ${{ matrix.platform }} Executable" > dist-final/HOW_TO_RUN.txt
        
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "Run: Double-click ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
          echo "Terminal: open ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "Run: Double-click ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
          echo "Terminal: .\\${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
        else
          echo "Run: ./${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
          echo "Make executable: chmod +x ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
        fi
        
        echo "" >> dist-final/HOW_TO_RUN.txt
        echo "Modes:" >> dist-final/HOW_TO_RUN.txt
        echo "  • Extended (default): Full functionality" >> dist-final/HOW_TO_RUN.txt
        echo "  • Basic: Add --basic flag" >> dist-final/HOW_TO_RUN.txt
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: dist-final/
        retention-days: 30
  
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Prepare release files
      run: |
        mkdir -p release/
        
        # Create zip files for each platform
        cd artifacts/
        for dir in */; do
          platform=$(echo "$dir" | sed 's/-toolkit-/-/' | sed 's|/$||')
          echo "📦 Creating $platform.zip"
          cd "$dir"
          zip -r "../../release/$platform.zip" .
          cd ..
        done
        
        cd ../release/
        ls -la
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*.zip
        name: "HP-150 Toolkit ${{ github.ref_name }}"
        body: |
          ## 🚀 HP-150 Toolkit - Release ${{ github.ref_name }}
          
          ### ✨ Nuevas características en esta versión:
          - Mejorada UI responsiva del diálogo de lectura de floppy
          - Eliminado prefijo "[STDERR]" de mensajes de track
          - Reset automático de GreaseWeazle al iniciar
          - Botones siempre visibles en todas las resoluciones
          - Layout optimizado con grid para mejor control
          
          ### 📦 Binarios disponibles:
          - 🍎 **macOS**: `hp150-macos.zip`
          - 🪟 **Windows**: `hp150-windows.zip` 
          - 🐧 **Linux**: `hp150-linux.zip`
          
          ### 🏃‍♂️ Cómo ejecutar:
          1. Descarga el archivo para tu plataforma
          2. Extrae el ZIP
          3. Lee `HOW_TO_RUN.txt` para instrucciones específicas
          
          ### 🔧 Modos disponibles:
          - **Extendido** (predeterminado): Funcionalidad completa
          - **Básico**: Agregar flag `--basic`
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
