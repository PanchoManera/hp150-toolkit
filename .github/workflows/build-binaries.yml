name: Build HP-150 Toolkit Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  PYINSTALLER_ARGS: '--paths=src --hidden-import=gui.hp150_gui --hidden-import=gui.hp150_gui_extended --hidden-import=gui.config_manager --hidden-import=gui.greasewazle_config_dialog --hidden-import=tools.hp150_fat'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            artifact-name: 'hp150-toolkit-macos'
            exe-name: 'HP150-Toolkit.app'
            icon: '🍎'
            platform: 'macOS'
            build-type: 'windowed'
            
          - os: windows-latest
            artifact-name: 'hp150-toolkit-windows'
            exe-name: 'HP150-Toolkit.exe'
            icon: '🪟'
            platform: 'Windows'
            build-type: 'onefile'
            
          - os: ubuntu-latest
            artifact-name: 'hp150-toolkit-linux'
            exe-name: 'HP150-Toolkit'
            icon: '🐧'
            platform: 'Linux'
            build-type: 'onefile'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install system dependencies
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y python3-tk
        elif [ "$RUNNER_OS" == "Windows" ]; then
          # Windows Python from actions/setup-python includes tkinter by default
          echo "Windows: tkinter should be available by default"
        fi
      shell: bash
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        # Install Pillow for icon creation (macOS only, but doesn't hurt on other platforms)
        pip install Pillow
    
    - name: Create application icon (macOS only)
      if: runner.os == 'macOS'
      run: |
        echo "🎨 Creating application icon for macOS..."
        
        # Skip icon creation for now to avoid YAML issues
        # PyInstaller will use default icon
        echo "⚠️ Using default PyInstaller icon for this build"
    
    - name: Debug import (Windows only)
      if: runner.os == 'Windows'
      run: |
        echo "Testing imports..."
        python -c "import sys; print('Python version:', sys.version)"
        python -c "import tkinter; print('OK tkinter available')"
        python -c "import sys; print('Python path:', sys.path[:3])"
        echo "Current directory structure:"
        Get-ChildItem -Path src\gui -Recurse -Name
        python -c "import sys; sys.path.insert(0, 'src'); from gui.hp150_gui import HP150ImageManager; print('OK HP150ImageManager import successful')"
        python -c "import sys; sys.path.insert(0, 'src'); from gui.hp150_gui_extended import HP150ImageManagerExtended; print('OK HP150ImageManagerExtended import successful')"
        echo "OK All imports successful"
      shell: pwsh
    
    - name: Build executable
      run: |
        BUILD_CMD="pyinstaller --name=HP150-Toolkit ${{ env.PYINSTALLER_ARGS }}"
        
        # Add OS-specific flags
        if [ "${{ matrix.build-type }}" == "windowed" ]; then
          BUILD_CMD="$BUILD_CMD --windowed --add-data=src:src --add-data=scripts:scripts --noconsole"
          # macOS-specific options for proper bundle generation
          if [ "$RUNNER_OS" == "macOS" ]; then
            BUILD_CMD="$BUILD_CMD --osx-bundle-identifier=com.hp150toolkit.app"
            # Add icon if available
            if [ -f "app_icon.icns" ]; then
              BUILD_CMD="$BUILD_CMD --icon=app_icon.icns"
              echo "✅ Using custom ICNS icon"
            elif [ -f "app_icon.png" ]; then
              BUILD_CMD="$BUILD_CMD --icon=app_icon.png"
              echo "✅ Using PNG icon"
            fi
          fi
        elif [ "${{ matrix.build-type }}" == "onefile" ]; then
          BUILD_CMD="$BUILD_CMD --onefile"
          if [ "$RUNNER_OS" == "Linux" ]; then
            BUILD_CMD="$BUILD_CMD --add-data=src:src --add-data=scripts:scripts"
          elif [ "$RUNNER_OS" == "Windows" ]; then
            BUILD_CMD="$BUILD_CMD --console --add-data src;src --add-data scripts;scripts"
            # Windows-specific hidden imports for tkinter
            BUILD_CMD="$BUILD_CMD --hidden-import=tkinter --hidden-import=tkinter.filedialog --hidden-import=tkinter.messagebox --hidden-import=tkinter.ttk"
          fi
        fi
        
        BUILD_CMD="$BUILD_CMD run_gui.py"
        echo "🔨 Running: $BUILD_CMD"
        eval $BUILD_CMD
      shell: bash
    
    - name: Prepare distribution
      run: |
        mkdir -p dist-final
        
        # Copy executable
        if [ "$RUNNER_OS" == "macOS" ]; then
          # Copy macOS bundle
          cp -r "dist/${{ matrix.exe-name }}" dist-final/
          
          # Fix macOS bundle structure and permissions
          echo "🔧 Fixing macOS bundle structure..."
          
          # Ensure proper bundle structure
          BUNDLE_PATH="dist-final/${{ matrix.exe-name }}"
          
          # Fix Info.plist if it exists
          if [ -f "$BUNDLE_PATH/Contents/Info.plist" ]; then
            echo "OK Info.plist found"
            # Ensure bundle identifier is set
            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier com.hp150toolkit.app" "$BUNDLE_PATH/Contents/Info.plist" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleIdentifier string com.hp150toolkit.app" "$BUNDLE_PATH/Contents/Info.plist"
            
            # Set bundle version
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion 1.6.1" "$BUNDLE_PATH/Contents/Info.plist" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string 1.6.1" "$BUNDLE_PATH/Contents/Info.plist"
            
            # Set short version
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString 1.6.1" "$BUNDLE_PATH/Contents/Info.plist" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string 1.6.1" "$BUNDLE_PATH/Contents/Info.plist"
          else
            echo "WARNING Creating minimal Info.plist"
            mkdir -p "$BUNDLE_PATH/Contents"
            cat > "$BUNDLE_PATH/Contents/Info.plist" << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>HP150-Toolkit</string>
            <key>CFBundleIdentifier</key>
            <string>com.hp150toolkit.app</string>
            <key>CFBundleName</key>
            <string>HP150-Toolkit</string>
            <key>CFBundleVersion</key>
            <string>1.6.1</string>
            <key>CFBundleShortVersionString</key>
            <string>1.6.1</string>
            <key>CFBundleInfoDictionaryVersion</key>
            <string>6.0</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
        </dict>
        </plist>
        EOF
          fi
          
          # Fix executable permissions
          if [ -f "$BUNDLE_PATH/Contents/MacOS/HP150-Toolkit" ]; then
            echo "🔧 Setting executable permissions..."
            chmod +x "$BUNDLE_PATH/Contents/MacOS/HP150-Toolkit"
            echo "OK Executable permissions set"
          else
            echo "WARNING Main executable not found, checking alternative locations..."
            find "$BUNDLE_PATH" -name "HP150-Toolkit" -type f -exec chmod +x {} \;
          fi
          
          # Remove quarantine attributes (helps with unsigned apps)
          echo "🔧 Removing quarantine attributes..."
          xattr -cr "$BUNDLE_PATH" 2>/dev/null || echo "WARNING Could not remove quarantine attributes"
          
          # Verify bundle structure
          echo "Bundle structure:"
          find "$BUNDLE_PATH" -type f 2>/dev/null | head -10 || echo "Could not list bundle contents"
          
          echo "OK macOS bundle prepared"
          
          # Test bundle validity
          echo "Testing bundle validity..."
          if [ -f "$BUNDLE_PATH/Contents/MacOS/HP150-Toolkit" ]; then
            echo "OK Main executable exists"
            file "$BUNDLE_PATH/Contents/MacOS/HP150-Toolkit" || true
            ls -la "$BUNDLE_PATH/Contents/MacOS/HP150-Toolkit" || true
          else
            echo "ERROR Main executable not found!"
            echo "Bundle contents:"
            find "$BUNDLE_PATH" -type f || true
            exit 1
          fi
          
        elif [ "$RUNNER_OS" == "Windows" ]; then
          cp "dist/${{ matrix.exe-name }}" dist-final/
        else
          cp "dist/${{ matrix.exe-name }}" dist-final/
        fi
        
        # Create HOW_TO_RUN.txt (avoiding Unicode characters that cause encoding issues)
        echo "${{ matrix.platform }} Executable" > dist-final/HOW_TO_RUN.txt
        
        if [ "$RUNNER_OS" == "macOS" ]; then
          echo "Run: Double-click ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
          echo "Terminal: open ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
        elif [ "$RUNNER_OS" == "Windows" ]; then
          echo "Run: Double-click ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
          echo "Terminal: .\\${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
        else
          echo "Run: ./${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
          echo "Make executable: chmod +x ${{ matrix.exe-name }}" >> dist-final/HOW_TO_RUN.txt
        fi
        
        echo "" >> dist-final/HOW_TO_RUN.txt
        echo "Modes:" >> dist-final/HOW_TO_RUN.txt
        echo "  - Extended (default): Full functionality" >> dist-final/HOW_TO_RUN.txt
        echo "  - Basic: Add --basic flag" >> dist-final/HOW_TO_RUN.txt
      shell: bash
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: dist-final/
        retention-days: 30
  
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Prepare release files
      run: |
        mkdir -p release/
        
        # Create zip files for each platform
        cd artifacts/
        for dir in */; do
          platform=$(echo "$dir" | sed 's/-toolkit-/-/' | sed 's|/$||')
          echo "Creating $platform.zip"
          cd "$dir"
          zip -r "../../release/$platform.zip" .
          cd ..
        done
        
        cd ../release/
        ls -la
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*.zip
        name: "HP-150 Toolkit ${{ github.ref_name }}"
        body: |
          ## HP-150 Toolkit - Release ${{ github.ref_name }}
          
          ### Nuevas características en esta versión:
          - Mejorada UI responsiva del diálogo de lectura de floppy
          - Eliminado prefijo "[STDERR]" de mensajes de track
          - Reset automático de GreaseWeazle al iniciar
          - Botones siempre visibles en todas las resoluciones
          - Layout optimizado con grid para mejor control
          
          ### Binarios disponibles:
          - **macOS**: `hp150-macos.zip`
          - **Windows**: `hp150-windows.zip` 
          - **Linux**: `hp150-linux.zip`
          
          ### Cómo ejecutar:
          1. Descarga el archivo para tu plataforma
          2. Extrae el ZIP
          3. Lee `HOW_TO_RUN.txt` para instrucciones específicas
          
          ### Modos disponibles:
          - **Extendido** (predeterminado): Funcionalidad completa
          - **Básico**: Agregar flag `--basic`
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
